- name: Get current date
  set_fact:
    current_date: "{{ lookup('pipe', 'date +%Y-%m-%d_%H-%M-%S') }}"

- name: Compress files locally
  ansible.builtin.archive:
    path: "{{ local_files }}"
    dest: "{{ local_compressed_files }}/file_{{ current_date }}.zip"
    format: zip
  register: compress_result
  delegate_to: localhost
  failed_when: compress_result.failed | default(false)

- name: Ensure remote temp path exists
  ansible.builtin.file:
    path: "{{ remote_temp_path }}"
    state: directory

- name: Copy ZIP file to remote temp path
  ansible.builtin.copy:
    src: "{{ local_compressed_files }}/file_{{ current_date }}.zip"
    dest: "{{ remote_temp_path }}/file_{{ current_date }}.zip"

- name: Unzip files on remote
  ansible.builtin.unarchive:
    src: "{{ remote_temp_path }}/file_{{ current_date }}.zip"
    dest: "{{ remote_temp_path }}/"
    remote_src: yes

- name: Remove ZIP from remote
  ansible.builtin.file:
    path: "{{ remote_temp_path }}/file_{{ current_date }}.zip"
    state: absent

- name: Copy unzipped files to public path
  ansible.builtin.copy:
    src: "{{ remote_temp_path }}/"
    dest: "{{ server_path }}"
    remote_src: yes

- name: Delete remote temp directory
  ansible.builtin.file:
    path: "{{ remote_temp_path }}"
    state: absent

- name: Ensure S3_BUCKET env variable is present in app service
  lineinfile:
    path: /etc/environment
    line: 'S3_BUCKET=s3-app-web-test1'
    create: yes
  notify: Restart flask app

- name: Check server response
  ansible.builtin.uri:
    url: "http://{{ ip }}"
    return_content: yes
  register: result
  failed_when: result.status != 200

- name: Show server response
  debug:
    msg: "{{ result.content }}"
